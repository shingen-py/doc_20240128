[出力物タイトル]
教材タイトル

[出力物内容]
Python, Django, Pandasを用いた気象データ分析結果のWeb公開

[出力物タイトル]
教材概要

[出力物内容]
この教材では、PythonのWebフレームワークであるDjangoを使って、Pandasで分析した山梨県の気象データをWeb上で公開する方法を学びます。教材は、Webサイトの設定、データのインポート、データの表示の3つの部分に分かれています。

[出力物タイトル]
教材テキスト

[出力物内容]
1. Djangoで新しいWebサイトを作成します。これには、Djangoの管理コマンドを使用します。
2. Djangoのデータベースに、Pandasで分析したデータをインポートします。このために、DjangoのORMを使用します。
3. Djangoのビューとテンプレートを使用して、インポートしたデータをWebページ上に表示します。

[出力物タイトル]
サンプルコード

[出力物内容]
```python
# Djangoの管理コマンドで新しいWebサイトを作成
django-admin startproject mysite

# DjangoのORMを使ってデータをインポート
from django.db import models
class WeatherData(models.Model):
    date = models.DateField()
    temperature = models.FloatField()

# Pandasで分析したデータをインポート
import pandas as pd
data = pd.read_csv('data.csv')
WeatherData.objects.bulk_create(
    WeatherData(date=row['date'], temperature=row['temperature']) for _, row in data.iterrows()
)

# ビューとテンプレートを使ってデータを表示
from django.shortcuts import render
def weather_view(request):
    data = WeatherData.objects.all()
    return render(request, 'weather.html', {'data': data})
```

[出力物タイトル]
作業手順

[出力物内容]
1. Djangoの管理コマンド`django-admin startproject mysite`を実行して新しいWebサイトを作ります。
2. `mysite/mysite/models.py`に`WeatherData`モデルを追加します。
3. `python manage.py makemigrations`と`python manage.py migrate`を実行してデータベースにテーブルを作ります。
4. Pandasで分析したデータをCSVファイル（`data.csv`）に保存します。
5. `python manage.py shell`を実行してDjangoのシェルを起動し、上記のサンプルコードを使ってデータをインポートします。
6. `mysite/mysite/views.py`に`weather_view`ビューを追加します。
7. `mysite/mysite/urls.py`に`weather_view`へのURLパターンを追加します。
8. `mysite/mysite/templates/weather.html`にデータを表示するためのテンプレートを作ります。
9. `python manage.py runserver`を実行してWebサイトを起動します。ブラウザで`http://localhost:8000/weather`にアクセスすると、インポートしたデータが表示されます。

